import{world}from"@minecraft/server";class Database{ALLOWED_CHARACTERS=/[^0-9a-zA-Z!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ ]/;name;rawName;meta;metaKeys;constructor(name){if("string"!=typeof name)throw new TypeError("Database name must be a string");if(-1!==name.search(this.ALLOWED_CHARACTERS))throw new TypeError("Database name must only contain alphanumeric characters and underscores");11<name.length&&console.warn(new RangeError("Database name must be 11 characters or less")),this.rawName=name,this.name=name.slice(0,11)+"_dbMC",this.getMeta()}setAsync(key,value){return new Promise((resolve,reject)=>{try{resolve(this.set(key,value))}catch(error){reject(error)}})}getAsync(key){return new Promise((resolve,reject)=>{try{resolve(this.get(key))}catch(error){reject(error)}})}hasAsync(key){return new Promise((resolve,reject)=>{try{resolve(this.has(key))}catch(error){reject(error)}})}deleteAsync(key){return new Promise((resolve,reject)=>{try{resolve(this.delete(key))}catch(error){reject(error)}})}clearAsync(){return new Promise((resolve,reject)=>{try{resolve(this.clear())}catch(error){reject(error)}})}keys(){return Object.keys(this.metaKeys)[Symbol.iterator]()}values(){var key,values=[];for(key of this.keys())values.push(this.get(key));return values[Symbol.iterator]()}entries(){var key,entries=[];for(key of this.keys())entries.push([key,this.get(key)]);return entries[Symbol.iterator]()}forEach(callbackfn,thisArg){for(var key of this.keys())callbackfn.call(thisArg,this.get(key),key,this)}get size(){return Object.keys(this.meta.keys).length}[Symbol.iterator](){return this.entries()}get[Symbol.toStringTag](){return"DatabaseMC"}keyCheck(key){if("string"!=typeof key&&"number"!=typeof key&&"symbol"!=typeof key)throw new TypeError("Key must be a string, number, or symbol");if("string"==typeof key&&key.length>this.MAX_KEY_LENGTH)throw new RangeError(`Key length must be ${this.MAX_KEY_LENGTH} characters or less`);if("string"==typeof key&&-1!==key.search(this.ALLOWED_CHARACTERS))throw new TypeError("Key must only contain alphanumeric characters and underscores")}getMeta(){try{this.meta=JSON.parse(world.getDynamicProperty(this.name))||{id:this.name,name:this.rawName,keys:0};var chunks=[];for(let i=0;i<this.meta.keys;i++)chunks.push(world.getDynamicProperty(`${this.name}[${i}]`));console.warn(chunks.join("")),this.metaKeys=JSON.parse(chunks.join(""))}catch{this.meta={id:this.name,name:this.rawName,keys:0},this.metaKeys={}}}setMeta(){var chunks=JSON.stringify(this.metaKeys).match(/.{1,30000}/g)??[];for(let i=0;i<chunks.length;i++)world.setDynamicProperty(`${this.name}[${i}]`,chunks[i]);this.meta.keys=chunks.length,world.setDynamicProperty(this.name,JSON.stringify(this.meta))}updateMeta(){this.setMeta(),this.getMeta()}deleteMeta(){world.setDynamicProperty(this.name,void 0);for(let i=0;i<this.meta.keys;i++)world.setDynamicProperty(`${this.name}[${i}]`,void 0)}}class ScoreboardDatabase extends Database{MAX_KEY_LENGTH=512;MAX_VALUE_LENGTH=32768;MAX_KEYS_LENGTH=32768;getObject(){var object=world.scoreboard.getObjective(this.meta.id);return object||(world.scoreboard.addObjective(this.meta.id,this.meta.name),this.getObject())}set(key,value){this.keyCheck(key);value=JSON.stringify(value);if(value.length>this.MAX_VALUE_LENGTH)throw new RangeError(`Value length must be ${this.MAX_VALUE_LENGTH} characters or less`);return this.delete(key),this.metaKeys[key]=value.length,this.updateMeta(),this.getObject().setScore(key+"§;"+value,0),this}get(key){this.keyCheck(key);var value=this.getObject().getParticipants().find(participant=>participant.displayName.startsWith(key+"§;"));if(value)return JSON.parse(value.displayName.split("§;").slice(1).join("§;"))}has(key){return this.keyCheck(key),this.getObject().getParticipants().some(participant=>participant.displayName.startsWith(key+"§;"))}delete(key){var object,participant;return this.keyCheck(key),!!this.has(key)&&!!(participant=(object=this.getObject()).getParticipants().find(participant=>participant.displayName.startsWith(key+"§;")))&&(object.removeParticipant(participant),delete this.metaKeys[key],this.updateMeta(),!0)}clear(){world.scoreboard.removeObjective(this.meta.id),this.deleteMeta()}}class WorldPropertyDatabase extends Database{MAX_KEY_LENGTH=512;MAX_VALUE_LENGTH=32768;MAX_KEYS_LENGTH=32768;set(key,value){this.keyCheck(key);value=JSON.stringify(value);if(value.length>this.MAX_VALUE_LENGTH)throw new RangeError(`Value length must be ${this.MAX_VALUE_LENGTH} characters or less`);return this.metaKeys[key]=value.length,this.updateMeta(),world.setDynamicProperty(this.getKey(key),value),this}get(key){this.keyCheck(key);key=world.getDynamicProperty(this.getKey(key));if(key)return JSON.parse(key)}has(key){return this.keyCheck(key),void 0!==world.getDynamicProperty(this.getKey(key))}delete(key){return this.keyCheck(key),!!this.has(key)&&(world.setDynamicProperty(this.getKey(key),void 0),delete this.metaKeys[key],this.updateMeta(),!0)}clear(){for(var key of this.keys())world.setDynamicProperty(this.getKey(key),void 0);this.deleteMeta()}getKey(key){return this.meta.id+"@"+key}}export{ScoreboardDatabase,WorldPropertyDatabase};